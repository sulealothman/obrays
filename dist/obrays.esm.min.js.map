{"version":3,"file":"obrays.esm.min.js","mappings":"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","sources":["webpack://obrays/webpack/bootstrap","webpack://obrays/webpack/runtime/define property getters","webpack://obrays/webpack/runtime/hasOwnProperty shorthand","webpack://obrays/./src/obj/index.js","webpack://obrays/./src/arr/index.js","webpack://obrays/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","class Obj extends Object {\n\n    /**\n     * Creates a new Obj\n     * @param {Object} obj \n     */\n    constructor(obj = {}) {\n        super();\n        Obj.assign(this, this.#cloneObj(obj));\n    }\n\n    /**\n     * @description Gets the length of object keys.\n     * @returns the length of object keys.\n     */\n    // @ts-ignore\n    get length() {\n        return Obj.keys(this).length;\n    }\n\n    /**\n     * @description Gets the value at path key of object.\n     * @param {String} pathKey a path key of the property to get.\n     * @returns the resolved value.\n     */\n    $(pathKey) {\n        return Obj.#deepAccess(this, pathKey);\n    }\n\n    /**\n     * @description Sets the value at path key of object. If path key doesn't exist, it's created.\n     * @param {String} pathKey a path key of the property to set.\n     * @param {String} value a value to set.\n     */\n    $s(pathKey, value) {\n        const key = pathKey.split('.').pop();\n        const pointer = Obj.#deepAccess(this, pathKey, true);\n        pointer[key] = value;\n    }\n\n    /**\n     * @description Checks if key is in object.\n     * @param {String} key a key to search for.\n     * @param {Boolean} isSubKey a key value is path key if true, else false, default value is false.\n     * @returns true if value is included, else false.\n     */\n    includes(key, isSubKey = false) {\n        if (!isSubKey)\n            return this ? Obj.keys(this).includes(key) : false;\n\n        const path = key;\n        key = key.split('.').pop();\n        const item = Obj.#deepAccess(this, path, true);\n\n        return item ? Obj.keys(item).includes(key) : false;\n    }\n\n    /**\n     * @description Checks if key is in object.\n     * @param {Object} obj a object to search in.\n     * @param {String} key a key to search for.\n     * @param {Boolean} isSubKey a key value is path key if true, else false, default value is false.\n     * @returns true if value is included, else false.\n     */\n    static includes(obj, key, isSubKey = false) {\n        if (!isSubKey) return Obj.keys(obj).includes(key);\n\n        const path = key;\n        const item = this.#deepAccess(obj, path, true);\n        key = key.split('.').pop();\n        return item ? Obj.keys(item).includes(key) : false;\n    }\n\n    /**\n     * @description Removes key/subKey from object.\n     * @param {String} key a key/pathKey to be removed from object, if present. \n     * @param {*} isSubKey a key value is path key if true, else false, default value is false.\n     */\n    remove(key, isSubKey = false) {\n        let item = this;\n        if (isSubKey) {\n            const path = key;\n            key = key.split('.').pop();\n            item = Obj.#deepAccess(this, path, true);\n        }\n        if (item[key]) delete item[key];\n    }\n\n    /**\n     * @description Removes key/subKey from object.\n     * @param {Object} obj a object to modify\n     * @param {String} key a key/pathKey to be removed from object, if present. \n     * @param {*} isSubKey a key value is path key if true, else false, default value is false.\n     */\n    static remove(obj, key, isSubKey = false) {\n        let item = obj;\n        if (isSubKey) {\n            const path = key;\n            key = key.split('.').pop();\n            item = this.#deepAccess(obj, path, true);\n        }\n\n        if (item[key]) delete item[key];\n    }\n\n    /**\n     * @description Creates a deep clone of object.\n     * @param {object} obj an object to deeply clone.\n     */\n    clone(obj) {\n        Obj.assign(this, this.#cloneObj(obj));\n    }\n\n    /**\n     * @description Creates a deep clone of object.\n     * @param {object} obj an object to deeply clone.\n     */\n    static clone(obj) {\n        const newObj = !Array.isArray(obj) ? {} : [];\n        for (const key of Object.keys(obj)) {\n            newObj[key] = !(typeof (obj[key]) === 'object') ?\n                obj[key] : this.clone(obj[key]);\n        }\n        return newObj;\n    }\n\n    // @ts-ignore\n    #cloneObj(obj) {\n        const newObj = !Array.isArray(obj) ? {} : [];\n        for (const key of Obj.keys(obj)) {\n            newObj[key] = !(typeof (obj[key]) === 'object') ?\n                obj[key] : this.#cloneObj(obj[key]);\n        }\n        return newObj;\n    }\n\n    /**\n     * @description Creates a deep clone of object keys. \n     * Note : All values of keys is undefined in new object.\n     * @param {object} obj an object to deeply clone.\n     */\n    cloneAsTemplate(obj) {\n        Obj.assign(this, this.#cloneObjTemplate(obj));\n    }\n\n    // @ts-ignore\n    #cloneObjTemplate(obj) {\n        const newObj = !Array.isArray(obj) ? {} : [];\n        for (const key of Obj.keys(obj)) {\n            newObj[key] = !(typeof (obj[key]) === 'object') ?\n                undefined : this.#cloneObjTemplate(obj[key]);\n        }\n        return newObj;\n    }\n\n    /**\n     * @description Converts this object to a JSON string.\n     * @param {*} replacer \n     * @param {*} spacer \n     * @returns JSON string\n     */\n     asJson(replacer = undefined, spacer = undefined) {\n        return JSON.stringify(this, replacer, spacer);\n    }\n\n    /**\n     * @description Parses a JSON string.\n     * @param {*} json a string to parse as JSON.\n     * @param {*} reviver \n     * @returns object\n     */\n    parse(json, reviver = undefined) {\n        return Obj.assign(this, JSON.parse(json, reviver));\n    }\n    \n    /**\n     * @description Checks if value is Object.\n     * @param {Object} value a value to check.\n     * @returns true if value is an object, else false.\n     */\n    static isObj(value) {\n        if (\n            typeof value === 'object' &&\n            !Array.isArray(value) &&\n            value !== null\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    // @ts-ignore\n    static #deepAccess(obj, pathKey, asKey = false) {\n        const path = pathKey.split('.');\n        if (asKey) path.pop();\n        return path.reduce((acc, val) => {\n            if (acc) return acc[val];\n            return false;\n        }, obj);\n    }\n}\n\nexport { Obj };","class Arr extends Array {\n    /**\n     * Creates a new Arr\n     * @param  {...any|any|array} args \n     */\n    // @ts-ignore\n    constructor(...args) {\n        if (args.length === 1) {\n            if (Arr.isArray(args[0])) {\n                super(...args[0]);\n            } else if (typeof args[0] === 'number') {\n                super(...[]);\n                this.push(args[0]);\n            }\n        } else {\n            super(...args);\n        }\n    }\n\n    /**\n     * @description Gets the actual size of array.\n     * @returns the array size.\n     */\n    // @ts-ignore\n    get size() {\n        return Object.keys(this).length;\n    }\n\n    /**\n     * @description Gets the actual size of array.\n     * @param {array} arr an array to inspect.\n     * @returns the array size.\n     */\n    static size(arr) {\n        return Object.keys(arr).length;\n    }\n\n    /**\n     * @description Checks if array is an empty.\n     * @return true if array is empty, else false.\n     */\n    // @ts-ignore\n    get isEmpty() {\n        return Object.keys(this).length ? false : true;\n    }\n\n    /**\n     * @description Checks if array is an empty.\n     * @param {array} arr an array to check.\n     * @return true if array is empty, else false.\n     */\n    static isEmpty(arr) {\n        return Object.keys(arr).length ? false : true;\n    }\n\n    // @ts-ignore\n    #isArrOrObj(item) {\n        return item !== null && typeof item === 'object' || item !== null && this.isArray(item);\n    }\n\n    // @ts-ignore\n    #isEqu(item, item2) {\n        const isArray = this.isArray(item);\n        let firstArr = item;\n        let secondArr = item2;\n        if (!isArray) {\n            firstArr = Object.keys(item);\n            secondArr = Object.keys(item2);\n        }\n        if (firstArr.length !== secondArr.length) return false;\n        for (const key in firstArr) {\n            if (this.#isArrOrObj(firstArr[key]) !== this.#isArrOrObj(secondArr[key])) return false;\n\n            if (this.#isArrOrObj(firstArr[key]))\n                if (!this.#isEqu(firstArr[key], secondArr[key])) return false;\n\n            if (!isArray)\n                if (firstArr[key] !== secondArr[key] || item[firstArr[key]] !== item2[firstArr[key]]) return false;\n\n            if (firstArr[key] !== secondArr[key]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @description Compares between two arrays to determine if they are equivalent.\n     * @param {Array} array an array to compare.\n     * @returns true if the arrays are equivalent, else false.\n     */\n    isEqual(array) {\n        if (this.length !== array.length) return false;\n        for (let key in this) {\n            if (this.#isArrOrObj(this[key]) !== this.#isArrOrObj(array[key])) return false;\n            \n            if (this.#isArrOrObj(this[key])) if (!this.#isEqu(this[key], array[key])) return false;\n            \n            if (this[key] !== array[key]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @description Removes all empty items \"undefined\" from array.\n     * @returns the new array length.\n     */\n    fixed() {\n        let length = this.length || 0;\n        while (length--) {\n            if (!this.includes(undefined)) break;\n            if (this[length] === undefined) {\n                this.splice(length, 1);\n            }\n        }\n        return this.length;\n    }\n\n    /**\n     * @description Removes all empty items \"undefined\" from array.\n     * @param {array} arr an array to modify.\n     * @returns the new array length.\n     */\n    static fixed(arr) {\n        if (!this.isArray(arr))\n            throw new TypeError(`${Object.keys({ arr })[0]} unexpected argument`);\n\n        let length = arr.length || 0;\n        while (length--) {\n            if (!arr.includes(undefined)) break;\n            if (arr[length] === undefined) arr.splice(length, 1);\n        }\n        return arr.length;\n    }\n\n    /**\n     * @description Sorts the array by the order.\n     * @param {String} order a flag, asc is ascending and default value, dsc is descending and alp is alphabet.\n     * @returns the new sorted array.\n     */\n    sortBy(order = 'asc') {\n        if (typeof order === 'string') order = order.toLocaleLowerCase();\n        const sort = {\n            asc: () => { return this.sort((a, b) => (isNaN(a) || isNaN(b)) ? a > b ? 1 : -1 : a - b) },\n            dsc: () => { return this.sort((a, b) => (isNaN(a) || isNaN(b)) ? b > a ? 1 : -1 : b - a) },\n            alp: () => { return this.sort() },\n        }\n        if (sort[order] === undefined)\n            throw new TypeError(`${Object.keys({ order })[0]} unexpected argument`);\n        return (sort[order]());\n    }\n\n    /**\n     * @description Remove all items from array.\n     */\n    clear() {\n        this.splice(0, this.length);\n    }\n\n    isArray(arg) {\n        return Arr.isArray(arg);\n    }\n\n    /**\n     * @description Removes an item/items by value.\n     * @param {any} item to be removed from array, if present.\n     * @param {Boolean} all removes all items from array if true, else false, default value is false.\n     * @returns true if array countained the specified item and removed, else false.\n     */\n    remove(item, all = false) {\n        if (!all) {\n            let index = this.findIndex(i => this.#isArrOrObj(item)\n                ? this.#isEqu(i, item) : i === item);\n            if (index > -1) {\n                this.splice(index, 1);\n                return true;\n            };\n            return false;\n        }\n        let indexes = [];\n        if (this.#isArrOrObj(item)) {\n            indexes = this.reduce((a, e, i) => (this.#isEqu(e, item) ? [...a, i] : a), []);\n        } else {\n            indexes = this.reduce((a, e, i) => (e === item ? [...a, i] : a), []);\n        }\n        if (!indexes.length) return false;\n        let length = indexes.length || 0;\n        while (length--) {\n            this.splice(indexes[length], 1);\n        }\n        return true;\n    }\n}\n\nexport { Arr };","import {Obj} from './obj';\nimport {Arr} from './arr';\n\nexport default {Arr, Obj};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Obj","constructor","super","assign","this","length","keys","$","pathKey","$s","value","split","pop","includes","isSubKey","path","item","static","remove","clone","newObj","Array","isArray","cloneAsTemplate","undefined","asJson","replacer","spacer","JSON","stringify","parse","json","reviver","asKey","reduce","acc","val","Arr","args","push","size","arr","isEmpty","item2","firstArr","secondArr","isEqual","array","fixed","splice","TypeError","sortBy","order","toLocaleLowerCase","sort","asc","a","b","isNaN","dsc","alp","clear","arg","all","index","findIndex","i","indexes","e"],"sourceRoot":""}